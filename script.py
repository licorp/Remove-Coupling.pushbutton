# -*- coding: utf-8 -*-


"""
================================================================
REMOVE COUPLING TOOL - FINAL CONSOLIDATED VERSION - June 2025
================================================================

CH·ª®C NƒÇNG CH√çNH:
‚úÖ TRUE TRIM: **G·ªòP 2 PIPES TH√ÄNH 1 PIPE LI·ªÄN M·∫†CH** 
- Extend pipe ch√≠nh ƒë·ªÉ bao ph·ªß to√†n b·ªô kho·∫£ng c√°ch
- X√≥a pipe th·ª© 2 (kh√¥ng c·∫ßn thi·∫øt)
- K·∫øt qu·∫£: 1 pipe li·ªÅn m·∫°ch duy nh·∫•t thay th·∫ø 2 pipes

FALLBACK METHODS (n·∫øu TRUE TRIM kh√¥ng th√†nh c√¥ng):
1. Union Pipes - S·ª≠ d·ª•ng Revit API ƒë·ªÉ union 2 pipes
2. Extend Both Pipes - Extend c·∫£ 2 pipes t·ªõi ƒëi·ªÉm gi·ªØa  
3. Connector Connection - K·∫øt n·ªëi logic th√¥ng qua connectors
4. Extend Pipes - K√©o d√†i pipes v·ªÅ gi·ªØa ƒë·ªÉ ƒë√≥ng kho·∫£ng h·ªü
5. Create Segment - T·∫°o pipe segment nh·ªè l√†m c·∫ßu n·ªëi

C√ÅCH S·ª¨ D·ª§NG:
- Ch·ªçn 1 ho·∫∑c nhi·ªÅu coupling elements
- Tool s·∫Ω t·ª± ƒë·ªông t√¨m 2 pipes k·∫øt n·ªëi v·ªõi m·ªói coupling
- X√≥a coupling v√† k·∫øt n·ªëi l·∫°i pipes

T√°c gi·∫£: GitHub Copilot Assistant
Phi√™n b·∫£n: Final Consolidated - June 2025
================================================================
"""

# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import clr
clr.AddReference('RevitAPI')
clr.AddReference('RevitAPIUI')

from pyrevit import revit, script
from Autodesk.Revit import DB
from Autodesk.Revit.UI.Selection import ObjectType
from Autodesk.Revit.DB.Plumbing import PlumbingUtils
from System.Collections.Generic import List

# Kh·ªüi t·∫°o output window
output = script.get_output()

# Kh·ªüi t·∫°o document v√† UI document
doc = revit.doc
uidoc = revit.uidoc

def get_pipe_connections(pipe):
    """L·∫•y t·∫•t c·∫£ connectors c·ªßa pipe"""
    try:
        connector_set = pipe.ConnectorManager.Connectors
        connectors = []
        for connector in connector_set:
            connectors.append(connector)
        return connectors
    except:
        return []

def find_connected_pipes(coupling):
    """T√¨m t·∫•t c·∫£ pipes k·∫øt n·ªëi v·ªõi coupling n√†y"""
    connected_pipes = []
    
    try:
        # Method 1: S·ª≠ d·ª•ng MEPModel (cho system families)
        if hasattr(coupling, 'MEPModel') and coupling.MEPModel:
            connector_set = coupling.MEPModel.ConnectorManager.Connectors
            for connector in connector_set:
                if connector.IsConnected:
                    for ref in connector.AllRefs:
                        element = ref.Owner
                        if element.Category.Id.IntegerValue == int(DB.BuiltInCategory.OST_PipeCurves):
                            if element.Id != coupling.Id:
                                connected_pipes.append(element)
                                
        # Method 2: S·ª≠ d·ª•ng ConnectorManager tr·ª±c ti·∫øp (cho family instances)
        elif hasattr(coupling, 'ConnectorManager') and coupling.ConnectorManager:
            connector_set = coupling.ConnectorManager.Connectors
            for connector in connector_set:
                if connector.IsConnected:
                    for ref in connector.AllRefs:
                        element = ref.Owner
                        if element.Category.Id.IntegerValue == int(DB.BuiltInCategory.OST_PipeCurves):
                            if element.Id != coupling.Id:
                                connected_pipes.append(element)
        
        # Method 3: Geometry-based search (fallback)
        if len(connected_pipes) == 0:
            coupling_location = coupling.Location
            if hasattr(coupling_location, 'Point'):
                search_point = coupling_location.Point
            elif hasattr(coupling_location, 'Curve'):
                search_point = coupling_location.Curve.GetEndPoint(0)
            else:
                return connected_pipes
            
            # T√¨m pipes g·∫ßn coupling
            pipe_collector = DB.FilteredElementCollector(doc).OfCategory(DB.BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType()
            for pipe in pipe_collector:
                pipe_curve = pipe.Location.Curve
                closest_point = pipe_curve.Project(search_point).XYZPoint
                distance = search_point.DistanceTo(closest_point)
                if distance < 1.0:  # Trong v√≤ng 1 foot
                    connected_pipes.append(pipe)
        
    except Exception as e:
        output.print_md('  ‚ö†Ô∏è L·ªói t√¨m connected pipes: {}'.format(str(e)))
    
    # Lo·∫°i b·ªè duplicates
    unique_pipes = []
    pipe_ids = set()
    for pipe in connected_pipes:
        if pipe.Id not in pipe_ids:
            unique_pipes.append(pipe)
            pipe_ids.add(pipe.Id)
    
    return unique_pipes

def true_trim_pipes(pipe1, pipe2):
    """
    TRUE TRIM: G·ªôp 2 pipes th√†nh 1 pipe li·ªÅn m·∫°ch duy nh·∫•t
    - Extend 1 pipe ƒë·ªÉ bao ph·ªß to√†n b·ªô kho·∫£ng c√°ch
    - X√≥a pipe th·ª© 2
    - K·∫øt qu·∫£: 1 pipe li·ªÅn m·∫°ch thay th·∫ø 2 pipes ri√™ng bi·ªát
    """
    try:
        output.print_md('  üî• **B·∫ÆT ƒê·∫¶U TRUE TRIM: G·ªòP 2 PIPES TH√ÄNH 1 PIPE LI·ªÄN M·∫†CH**')
        
        # L·∫•y curves c·ªßa 2 pipes
        curve1 = pipe1.Location.Curve
        curve2 = pipe2.Location.Curve
        
        output.print_md('    üìè Pipe 1 length: {:.4f} feet'.format(curve1.Length))
        output.print_md('    üìè Pipe 2 length: {:.4f} feet'.format(curve2.Length))
        
        # T√≠nh kho·∫£ng c√°ch gi·ªØa c√°c endpoints ƒë·ªÉ t√¨m ƒëi·ªÉm k·∫øt n·ªëi t·ªët nh·∫•t
        p1_start = curve1.GetEndPoint(0)
        p1_end = curve1.GetEndPoint(1)
        p2_start = curve2.GetEndPoint(0)
        p2_end = curve2.GetEndPoint(1)
        
        # T√≠nh t·∫•t c·∫£ kho·∫£ng c√°ch c√≥ th·ªÉ
        distances = [
            (p1_start.DistanceTo(p2_start), p1_start, p2_start, "P1_Start", "P2_Start"),
            (p1_start.DistanceTo(p2_end), p1_start, p2_end, "P1_Start", "P2_End"),
            (p1_end.DistanceTo(p2_start), p1_end, p2_start, "P1_End", "P2_Start"),
            (p1_end.DistanceTo(p2_end), p1_end, p2_end, "P1_End", "P2_End")
        ]
        
        # S·∫Øp x·∫øp theo kho·∫£ng c√°ch g·∫ßn nh·∫•t
        distances.sort(key=lambda x: x[0])
        min_distance, conn_p1, conn_p2, p1_type, p2_type = distances[0]
        
        output.print_md('    üìè Kho·∫£ng c√°ch g·∫ßn nh·∫•t: {:.4f} feet ({} ‚Üî {})'.format(
            min_distance, p1_type, p2_type))
        
        if min_distance > 10.0:  # Qu√° xa ƒë·ªÉ k·∫øt n·ªëi
            output.print_md('    ‚ö†Ô∏è Pipes qu√° xa ƒë·ªÉ trim ({:.4f} feet)'.format(min_distance))
            return False
        
        # X√°c ƒë·ªãnh ƒëi·ªÉm ƒë·∫ßu v√† cu·ªëi c·ªßa pipe li·ªÅn m·∫°ch m·ªõi - GI·ªÆ NGUY√äN H∆Ø·ªöNG PIPE G·ªêC
        # Ch·ªçn pipe d√†i h∆°n l√†m pipe ch√≠nh ƒë·ªÉ gi·ªØ nguy√™n h∆∞·ªõng
        curve1_length = curve1.Length
        curve2_length = curve2.Length
        
        if curve1_length >= curve2_length:
            keep_pipe = pipe1
            delete_pipe = pipe2
            main_curve = curve1
            extend_curve = curve2
            output.print_md('    üìè Ch·ªçn pipe1 l√†m ch√≠nh (d√†i h∆°n: {:.3f} vs {:.3f})'.format(curve1_length, curve2_length))
        else:
            keep_pipe = pipe2
            delete_pipe = pipe1
            main_curve = curve2
            extend_curve = curve1
            output.print_md('    üìè Ch·ªçn pipe2 l√†m ch√≠nh (d√†i h∆°n: {:.3f} vs {:.3f})'.format(curve2_length, curve1_length))
        
        # T√¨m endpoint c·ªßa pipe ch√≠nh g·∫ßn v·ªõi pipe ph·ª• nh·∫•t
        main_start = main_curve.GetEndPoint(0)
        main_end = main_curve.GetEndPoint(1)
        extend_start = extend_curve.GetEndPoint(0)
        extend_end = extend_curve.GetEndPoint(1)
        
        # T√≠nh kho·∫£ng c√°ch ƒë·ªÉ quy·∫øt ƒë·ªãnh extend v·ªÅ ph√≠a n√†o
        distances = [
            (main_start.DistanceTo(extend_start), main_start, extend_end, "extend_from_main_start"),
            (main_start.DistanceTo(extend_end), main_start, extend_start, "extend_from_main_start"),
            (main_end.DistanceTo(extend_start), main_end, extend_end, "extend_from_main_end"),
            (main_end.DistanceTo(extend_end), main_end, extend_start, "extend_from_main_end")
        ]
        
        distances.sort(key=lambda x: x[0])
        min_distance, connection_point, extend_to_point, extend_direction = distances[0]
        
        # T·∫°o curve m·ªõi GI·ªÆ NGUY√äN H∆Ø·ªöNG pipe ch√≠nh
        if extend_direction == "extend_from_main_start":
            # Extend t·ª´ main_start, gi·ªØ nguy√™n main_end
            new_start = extend_to_point  # ƒêi·ªÉm xa nh·∫•t c·ªßa pipe ph·ª•
            new_end = main_end          # Gi·ªØ nguy√™n endpoint c·ªßa pipe ch√≠nh
        else:
            # Extend t·ª´ main_end, gi·ªØ nguy√™n main_start
            new_start = main_start      # Gi·ªØ nguy√™n startpoint c·ªßa pipe ch√≠nh
            new_end = extend_to_point   # ƒêi·ªÉm xa nh·∫•t c·ªßa pipe ph·ª•
        
        output.print_md('    üéØ Pipe li·ªÅn m·∫°ch t·ª´: ({:.3f}, {:.3f}) ‚Üí ({:.3f}, {:.3f})'.format(
            new_start.X, new_start.Y, new_end.X, new_end.Y))
        output.print_md('    üîÑ H∆∞·ªõng: {} (gi·ªØ nguy√™n h∆∞·ªõng pipe ch√≠nh)'.format(extend_direction))
        
        # T·∫°o curve li·ªÅn m·∫°ch cho pipe ƒë∆∞·ª£c gi·ªØ l·∫°i - KI·ªÇM TRA H∆Ø·ªöNG TR∆Ø·ªöC
        continuous_curve = None  # Initialize ƒë·ªÉ tr√°nh unbound
        try:
            # QUAN TR·ªåNG: Kh√¥ng x√≥a pipe th·ª© 2 ngay, extend tr∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi
            output.print_md('    üîó B∆∞·ªõc 1: Extend pipe ch√≠nh ƒë·ªÉ bao ph·ªß to√†n b·ªô ƒë∆∞·ªùng ·ªëng...')
            
            # T·∫°o curve m·ªõi
            continuous_curve = DB.Line.CreateBound(new_start, new_end)
            
            # Ki·ªÉm tra h∆∞·ªõng curve m·ªõi so v·ªõi curve g·ªëc
            original_direction = main_curve.Direction
            new_direction = continuous_curve.Direction
            
            # T√≠nh g√≥c gi·ªØa 2 vectors (n·∫øu > 90 ƒë·ªô th√¨ ƒë·∫£o ng∆∞·ª£c)
            dot_product = original_direction.DotProduct(new_direction)
            output.print_md('    üìê Dot product (direction check): {:.3f}'.format(dot_product))
            
            # N·∫øu dot product < 0 th√¨ h∆∞·ªõng ng∆∞·ª£c l·∫°i - c·∫ßn ƒë·∫£o ng∆∞·ª£c
            if dot_product < 0:
                output.print_md('    üîÑ Ph√°t hi·ªán h∆∞·ªõng ng∆∞·ª£c - ƒê·∫£o ng∆∞·ª£c curve...')
                # ƒê·∫£o ng∆∞·ª£c start v√† end
                continuous_curve = DB.Line.CreateBound(new_end, new_start)
                new_direction = continuous_curve.Direction
                output.print_md('    ‚úÖ ƒê√£ ƒë·∫£o ng∆∞·ª£c curve ƒë·ªÉ gi·ªØ nguy√™n h∆∞·ªõng')
            
            # Apply curve m·ªõi - EXTEND PIPE CH√çNH
            keep_pipe.Location.Curve = continuous_curve
            output.print_md('    ‚úÖ ƒê√£ extend pipe {} th√†nh pipe li·ªÅn m·∫°ch'.format(keep_pipe.Id))
            
            # B∆∞·ªõc 2: Thu th·∫≠p th√¥ng tin connections c·ªßa pipe s·∫Ω b·ªã x√≥a TR∆Ø·ªöC KHI X√ìA
            output.print_md('    üîó B∆∞·ªõc 2: Thu th·∫≠p connections c·ªßa pipe s·∫Ω x√≥a...')
            delete_connectors = get_pipe_connections(delete_pipe)
            connections_to_transfer = []
            
            for conn in delete_connectors:
                if conn.IsConnected:
                    for ref in conn.AllRefs:
                        if ref.Owner.Id != delete_pipe.Id:  # Kh√¥ng ph·∫£i ch√≠nh pipe n√†y
                            other_element = ref.Owner
                            connections_to_transfer.append({
                                'element': other_element,
                                'connector': ref,
                                'position': conn.Origin
                            })
                            output.print_md('      üìå Ghi nh·∫≠n connection: pipe {} ‚Üî element {}'.format(
                                delete_pipe.Id, other_element.Id))
            
            # B∆∞·ªõc 3: Ki·ªÉm tra connectors c·ªßa pipe ƒë√£ extend
            output.print_md('    üîó B∆∞·ªõc 3: Ki·ªÉm tra connectors c·ªßa pipe ƒë√£ extend...')
            updated_connectors = get_pipe_connections(keep_pipe)
            output.print_md('    üìä Pipe {} c√≥ {} connectors sau extend'.format(keep_pipe.Id, len(updated_connectors)))
            
            # B∆∞·ªõc 4: Th·ª≠ k·∫øt n·ªëi l·∫°i v·ªõi c√°c elements m√† pipe c≈© ƒë√£ k·∫øt n·ªëi
            output.print_md('    üîó B∆∞·ªõc 4: K·∫øt n·ªëi l·∫°i v·ªõi {} elements...'.format(len(connections_to_transfer)))
            for connection_info in connections_to_transfer:
                try:
                    target_element = connection_info['element']
                    target_connector = connection_info['connector']
                    target_position = connection_info['position']
                    
                    # T√¨m connector g·∫ßn nh·∫•t c·ªßa pipe m·ªõi
                    closest_connector = None
                    min_dist = float('inf')
                    
                    for new_conn in updated_connectors:
                        if not new_conn.IsConnected:  # Ch·ªâ k·∫øt n·ªëi v·ªõi connector r·∫£nh
                            dist = new_conn.Origin.DistanceTo(target_position)
                            if dist < min_dist:
                                min_dist = dist
                                closest_connector = new_conn
                    
                    if closest_connector and min_dist < 1.0:  # Trong v√≤ng 1 foot
                        closest_connector.ConnectTo(target_connector)
                        output.print_md('      ‚úÖ K·∫øt n·ªëi pipe {} v·ªõi element {} (distance: {:.3f})'.format(
                            keep_pipe.Id, target_element.Id, min_dist))
                    else:
                        output.print_md('      ‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi element {} (min_dist: {:.3f})'.format(
                            target_element.Id, min_dist))
                        
                except Exception as conn_error:
                    output.print_md('      ‚ùå L·ªói k·∫øt n·ªëi v·ªõi element {}: {}'.format(
                        connection_info['element'].Id, str(conn_error)))
            
            # B∆∞·ªõc 5: Disconnect pipe th·ª© 2 t·ª´ t·∫•t c·∫£ connections tr∆∞·ªõc khi x√≥a
            output.print_md('    üîó B∆∞·ªõc 5: Disconnect pipe th·ª© 2 tr∆∞·ªõc khi x√≥a...')
            for conn in delete_connectors:
                if conn.IsConnected:
                    refs_to_disconnect = []
                    for ref in conn.AllRefs:
                        if ref.Owner.Id != delete_pipe.Id:
                            refs_to_disconnect.append(ref)
                    
                    for ref in refs_to_disconnect:
                        try:
                            conn.DisconnectFrom(ref)
                            output.print_md('      ‚úÖ Disconnected pipe {} t·ª´ element {}'.format(delete_pipe.Id, ref.Owner.Id))
                        except:
                            pass
            
        except Exception as e_extend:
            output.print_md('    ‚ùå L·ªói t·∫°o pipe li·ªÅn m·∫°ch: {}'.format(str(e_extend)))
            # Th·ª≠ method backup: Extend ƒë∆°n gi·∫£n
            output.print_md('    üîÑ Th·ª≠ backup method: Extend ƒë∆°n gi·∫£n thay v√¨ merge...')
            try:
                # Ch·ªâ extend pipe ch√≠nh ƒë·∫øn connection point (kh√¥ng merge ho√†n to√†n)
                if extend_direction == "extend_from_main_start":
                    continuous_curve = DB.Line.CreateBound(connection_point, main_end)
                else:
                    continuous_curve = DB.Line.CreateBound(main_start, connection_point)
                
                keep_pipe.Location.Curve = continuous_curve
                output.print_md('    ‚úÖ Backup method th√†nh c√¥ng - Pipe {} ƒë√£ ƒë∆∞·ª£c extend'.format(keep_pipe.Id))
                
                # Kh√¥ng x√≥a pipe th·ª© 2 trong backup method ƒë·ªÉ gi·ªØ k·∫øt n·ªëi
                output.print_md('    ‚ö†Ô∏è Backup method: Gi·ªØ pipe {} ƒë·ªÉ duy tr√¨ k·∫øt n·ªëi'.format(delete_pipe.Id))
                delete_pipe = None  # Kh√¥ng x√≥a
                
            except Exception as backup_error:
                output.print_md('    ‚ùå Backup method c≈©ng th·∫•t b·∫°i: {}'.format(str(backup_error)))
                return False
        
        # X√≥a pipe th·ª© 2 ƒë·ªÉ ch·ªâ c√≤n 1 pipe li·ªÅn m·∫°ch (n·∫øu c√≥)
        if delete_pipe:
            try:
                doc.Delete(delete_pipe.Id)
                output.print_md('    üóëÔ∏è ƒê√£ x√≥a pipe {} (kh√¥ng c·∫ßn thi·∫øt n·ªØa)'.format(delete_pipe.Id))
                
            except Exception as e_delete:
                output.print_md('    ‚ùå L·ªói x√≥a pipe th·ª´a: {}'.format(str(e_delete)))
                # Kh√¥ng return False v√¨ pipe ch√≠nh ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
        else:
            output.print_md('    ‚ÑπÔ∏è Kh√¥ng x√≥a pipe th·ª© 2 (backup method ƒë·ªÉ duy tr√¨ k·∫øt n·ªëi)')
        
        # T√≠nh to√°n ƒë·ªô d√†i m·ªõi v√† ki·ªÉm tra connections cu·ªëi c√πng
        if continuous_curve:
            total_length = continuous_curve.Length
            output.print_md('    üìè ƒê·ªô d√†i pipe li·ªÅn m·∫°ch: {:.4f} feet'.format(total_length))
        else:
            output.print_md('    ‚ö†Ô∏è Kh√¥ng th·ªÉ t√≠nh ƒë·ªô d√†i - continuous_curve kh√¥ng ƒë∆∞·ª£c t·∫°o')
        
        # B√°o c√°o connections cu·ªëi c√πng
        final_connectors = get_pipe_connections(keep_pipe)
        connected_count = sum(1 for conn in final_connectors if conn.IsConnected)
        output.print_md('    üîó Pipe cu·ªëi c√≥ {} connections ({} total connectors)'.format(
            connected_count, len(final_connectors)))
        
        output.print_md('    üéâ HO√ÄN TH√ÄNH TRUE TRIM! 2 pipes ƒë√£ ƒë∆∞·ª£c g·ªôp th√†nh 1 pipe li·ªÅn m·∫°ch!')
        output.print_md('    üíæ Pipe {} gi·ªØ nguy√™n T·∫§T C·∫¢ th√¥ng tin g·ªëc (tags, parameters, schedules)'.format(keep_pipe.Id))
        output.print_md('    üìä K·∫øt qu·∫£: 1 pipe li·ªÅn m·∫°ch v·ªõi {} connections ho·∫°t ƒë·ªông'.format(connected_count))
        return True
        
    except Exception as e:
        output.print_md('    ‚ùå L·ªói True Trim: {}'.format(str(e)))
        return False

def extend_both_pipes_to_connect(pipe1, pipe2):
    """
    BACKUP METHOD: Extend c·∫£ 2 pipes ƒë·ªÉ k·∫øt n·ªëi (kh√¥ng merge th√†nh 1)
    S·ª≠ d·ª•ng khi TRUE TRIM kh√¥ng th√†nh c√¥ng
    """
    try:
        output.print_md('  üîÑ **BACKUP METHOD: EXTEND C·∫¢ 2 PIPES ƒê·ªÇ K·∫æT N·ªêI**')
        
        curve1 = pipe1.Location.Curve
        curve2 = pipe2.Location.Curve
        
        # T√¨m c√°c endpoints g·∫ßn nh·∫•t
        p1_start = curve1.GetEndPoint(0)
        p1_end = curve1.GetEndPoint(1)
        p2_start = curve2.GetEndPoint(0)
        p2_end = curve2.GetEndPoint(1)
        
        distances = [
            (p1_start.DistanceTo(p2_start), p1_start, p2_start, "start", "start"),
            (p1_start.DistanceTo(p2_end), p1_start, p2_end, "start", "end"),
            (p1_end.DistanceTo(p2_start), p1_end, p2_start, "end", "start"),
            (p1_end.DistanceTo(p2_end), p1_end, p2_end, "end", "end")
        ]
        
        distances.sort(key=lambda x: x[0])
        min_distance, conn_p1, conn_p2, p1_side, p2_side = distances[0]
        
        output.print_md('    üìè Kho·∫£ng c√°ch nh·ªè nh·∫•t: {:.4f} feet'.format(min_distance))
        
        if min_distance > 5.0:
            output.print_md('    ‚ö†Ô∏è Kho·∫£ng c√°ch qu√° l·ªõn ƒë·ªÉ extend')
            return False
        
        # T√≠nh ƒëi·ªÉm gi·ªØa ƒë·ªÉ extend c·∫£ 2 pipes t·ªõi ƒë√≥
        midpoint = DB.XYZ(
            (conn_p1.X + conn_p2.X) / 2,
            (conn_p1.Y + conn_p2.Y) / 2,
            (conn_p1.Z + conn_p2.Z) / 2
        )
        
        # Extend pipe 1
        if p1_side == "start":
            new_curve1 = DB.Line.CreateBound(midpoint, p1_end)
        else:
            new_curve1 = DB.Line.CreateBound(p1_start, midpoint)
        
        # Extend pipe 2  
        if p2_side == "start":
            new_curve2 = DB.Line.CreateBound(midpoint, p2_end)
        else:
            new_curve2 = DB.Line.CreateBound(p2_start, midpoint)
        
        # Apply changes
        pipe1.Location.Curve = new_curve1
        pipe2.Location.Curve = new_curve2
        
        output.print_md('    ‚úÖ ƒê√£ extend c·∫£ 2 pipes t·ªõi ƒëi·ªÉm gi·ªØa')
        output.print_md('    üìä K·∫øt qu·∫£: 2 pipes ri√™ng bi·ªát ƒë∆∞·ª£c extend ƒë·ªÉ k·∫øt n·ªëi')
        return True
        
    except Exception as e:
        output.print_md('    ‚ùå L·ªói extend both pipes: {}'.format(str(e)))
        return False

def connect_pipes_comprehensive(pipe1, pipe2):
    """
    K·∫øt n·ªëi 2 pipes v·ªõi 6-method fallback system
    Priority: TRUE_TRIM ‚Üí EXTEND_BOTH ‚Üí UNION ‚Üí CONNECTOR ‚Üí EXTEND ‚Üí SEGMENT
    """
    output.print_md('  üîó **B·∫ÆT ƒê·∫¶U COMPREHENSIVE PIPE CONNECTION**')
    
    # METHOD 1: TRUE TRIM (Priority 1 - Preferred method)
    output.print_md('  ü•á **METHOD 1: TRUE TRIM (G·ªòP 2 PIPES TH√ÄNH 1)**')
    if true_trim_pipes(pipe1, pipe2):
        return "TRUE_TRIM"
    
    # METHOD 2: EXTEND BOTH PIPES (Backup for TRUE TRIM)
    output.print_md('  ü•à **METHOD 2: EXTEND BOTH PIPES (BACKUP)**')
    if extend_both_pipes_to_connect(pipe1, pipe2):
        return "EXTEND_BOTH"
    
    # METHOD 3: UNION (n·∫øu True Trim kh√¥ng th√†nh c√¥ng)
    output.print_md('  ü•â **METHOD 3: UNION PIPES**')
    try:
        pipe_ids = [pipe1.Id, pipe2.Id]
        collection = List[DB.ElementId](pipe_ids)
        union_result = DB.ElementTransformUtils.CopyElements(doc, collection, doc, None, None)
        if union_result and len(union_result) > 0:
            output.print_md('    ‚úÖ Union th√†nh c√¥ng')
            return "UNION"
    except Exception as e:
        output.print_md('    ‚ùå Union failed: {}'.format(str(e)))
    
    # METHOD 4: CONNECTOR CONNECTION
    output.print_md('  üîå **METHOD 4: CONNECTOR CONNECTION**')
    try:
        connectors1 = get_pipe_connections(pipe1)
        connectors2 = get_pipe_connections(pipe2)
        
        for c1 in connectors1:
            for c2 in connectors2:
                if not c1.IsConnected and not c2.IsConnected:
                    distance = c1.Origin.DistanceTo(c2.Origin)
                    if distance < 2.0:  # Trong v√≤ng 2 feet
                        try:
                            c1.ConnectTo(c2)
                            output.print_md('    ‚úÖ ƒê√£ k·∫øt n·ªëi connectors (distance: {:.3f})'.format(distance))
                            return "CONNECTOR"
                        except:
                            continue
    except Exception as e:
        output.print_md('    ‚ùå Connector connection failed: {}'.format(str(e)))
    
    # METHOD 5: EXTEND PIPES
    output.print_md('  üìè **METHOD 5: EXTEND PIPES**')
    try:
        curve1 = pipe1.Location.Curve
        curve2 = pipe2.Location.Curve
        
        # T√¨m c√°c endpoints v√† extend v·ªÅ ph√≠a g·∫ßn nh·∫•t
        p1_start = curve1.GetEndPoint(0)
        p1_end = curve1.GetEndPoint(1)
        p2_start = curve2.GetEndPoint(0)
        p2_end = curve2.GetEndPoint(1)
        
        # T√¨m c·∫∑p ƒëi·ªÉm g·∫ßn nh·∫•t
        min_dist = float('inf')
        best_config = None
        
        configs = [
            (p1_start, p2_start, "p1_from_start", "p2_from_start"),
            (p1_start, p2_end, "p1_from_start", "p2_from_end"),
            (p1_end, p2_start, "p1_from_end", "p2_from_start"),
            (p1_end, p2_end, "p1_from_end", "p2_from_end")
        ]
        
        for point1, point2, config1, config2 in configs:
            dist = point1.DistanceTo(point2)
            if dist < min_dist:
                min_dist = dist
                best_config = (point1, point2, config1, config2)
        
        if best_config and min_dist < 5.0:
            point1, point2, config1, config2 = best_config
            midpoint = DB.XYZ((point1.X + point2.X)/2, (point1.Y + point2.Y)/2, (point1.Z + point2.Z)/2)
            
            # Extend pipe1
            if "start" in config1:
                new_curve1 = DB.Line.CreateBound(midpoint, p1_end)
            else:
                new_curve1 = DB.Line.CreateBound(p1_start, midpoint)
            
            # Extend pipe2
            if "start" in config2:
                new_curve2 = DB.Line.CreateBound(midpoint, p2_end)
            else:
                new_curve2 = DB.Line.CreateBound(p2_start, midpoint)
            
            pipe1.Location.Curve = new_curve1
            pipe2.Location.Curve = new_curve2
            
            output.print_md('    ‚úÖ ƒê√£ extend pipes (gap: {:.3f} feet)'.format(min_dist))
            return "EXTEND"
            
    except Exception as e:
        output.print_md('    ‚ùå Extend pipes failed: {}'.format(str(e)))
    
    # METHOD 6: CREATE SEGMENT (last resort)
    output.print_md('  üÜï **METHOD 6: CREATE SEGMENT**')
    try:
        # T√¨m gap nh·ªè nh·∫•t v√† t·∫°o pipe segment ƒë·ªÉ n·ªëi
        curve1 = pipe1.Location.Curve
        curve2 = pipe2.Location.Curve
        
        endpoints = [
            (curve1.GetEndPoint(0), curve2.GetEndPoint(0)),
            (curve1.GetEndPoint(0), curve2.GetEndPoint(1)),
            (curve1.GetEndPoint(1), curve2.GetEndPoint(0)),
            (curve1.GetEndPoint(1), curve2.GetEndPoint(1))
        ]
        
        min_dist = float('inf')
        best_points = None
        
        for p1, p2 in endpoints:
            dist = p1.DistanceTo(p2)
            if dist < min_dist:
                min_dist = dist
                best_points = (p1, p2)
        
        if best_points and min_dist < 3.0:
            p1, p2 = best_points
            
            # T·∫°o pipe segment n·ªëi
            segment_curve = DB.Line.CreateBound(p1, p2)
            
            # L·∫•y pipe type t·ª´ pipe1
            pipe_type_id = pipe1.GetTypeId()
            level_id = pipe1.ReferenceLevel.Id if pipe1.ReferenceLevel else doc.ActiveView.GenLevel.Id
            
            # T·∫°o pipe segment m·ªõi
            new_pipe = DB.Plumbing.Pipe.Create(doc, pipe_type_id, level_id, segment_curve)
            
            if new_pipe:
                output.print_md('    ‚úÖ ƒê√£ t·∫°o pipe segment n·ªëi (length: {:.3f} feet)'.format(min_dist))
                return "SEGMENT"
                
    except Exception as e:
        output.print_md('    ‚ùå Create segment failed: {}'.format(str(e)))
    
    output.print_md('  üí• **T·∫§T C·∫¢ METHODS TH·∫§T B·∫†I**')
    return False

def main():
    """H√†m ch√≠nh c·ªßa tool - Complete Remove Coupling Tool"""
    try:
        selection = uidoc.Selection
        
        # Hi·ªÉn th·ªã header v√† h∆∞·ªõng d·∫´n
        output.print_md('# üîß REMOVE COUPLING TOOL - FINAL CONSOLIDATED VERSION')
        output.print_md('## üéØ TRUE TRIM: Extend pipes hi·ªán c√≥ ƒë·ªÉ k·∫øt n·ªëi (GI·ªÆ NGUY√äN TH√îNG TIN)')
        output.print_md('')
        output.print_md('### üîÑ C√°c ph∆∞∆°ng ph√°p ƒë∆∞·ª£c s·ª≠ d·ª•ng:')
        output.print_md('1. **TRUE TRIM** (Priority): G·ªôp 2 pipes th√†nh 1 pipe li·ªÅn m·∫°ch')
        output.print_md('2. **EXTEND BOTH** (Backup): Extend c·∫£ 2 pipes t·ªõi ƒëi·ªÉm gi·ªØa')
        output.print_md('3. **UNION**: S·ª≠ d·ª•ng Revit API ƒë·ªÉ union pipes')
        output.print_md('4. **CONNECTOR**: K·∫øt n·ªëi logic th√¥ng qua connectors')
        output.print_md('5. **EXTEND**: K√©o d√†i pipes v·ªÅ gi·ªØa ƒë·ªÉ ƒë√≥ng kho·∫£ng h·ªü')
        output.print_md('6. **SEGMENT**: T·∫°o pipe segment nh·ªè l√†m c·∫ßu n·ªëi')
        output.print_md('')
        
        # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        output.print_md('### üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:')
        output.print_md('1. Ch·ªçn 1 ho·∫∑c nhi·ªÅu coupling elements trong Revit')
        output.print_md('2. Ch·∫°y tool n√†y')
        output.print_md('3. Tool s·∫Ω t·ª± ƒë·ªông t√¨m 2 pipes k·∫øt n·ªëi v·ªõi m·ªói coupling')
        output.print_md('4. X√≥a coupling v√† th·ª±c hi·ªán TRUE TRIM (g·ªôp pipes)')
        output.print_md('')
        
        # Y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªçn elements
        output.print_md('### üñ±Ô∏è H√£y ch·ªçn coupling elements mu·ªën x√≥a...')
        selected_elements = []
        
        try:
            # Cho ph√©p user ch·ªçn multiple elements
            selected_refs = selection.PickObjects(ObjectType.Element, "Ch·ªçn coupling elements (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)")
            
            for ref in selected_refs:
                element = doc.GetElement(ref.ElementId)
                selected_elements.append(element)
                
        except Exception as selection_error:
            output.print_md('‚ùå **L·ªói ch·ªçn elements:** {}'.format(str(selection_error)))
            output.print_md('üí° **H∆∞·ªõng d·∫´n:** H√£y ch·ªçn 1 ho·∫∑c nhi·ªÅu coupling elements trong model')
            return
        
        if not selected_elements:
            output.print_md('‚ö†Ô∏è **Kh√¥ng c√≥ elements n√†o ƒë∆∞·ª£c ch·ªçn!**')
            return
        
        output.print_md('')
        output.print_md('# üöÄ B·∫ÆT ƒê·∫¶U X·ª¨ L√ù')
        output.print_md('**ƒê√£ ch·ªçn {} element(s)**'.format(len(selected_elements)))
        output.print_md('---')
        
        # B·∫Øt ƒë·∫ßu transaction
        with DB.Transaction(doc, "Remove Coupling and TRUE TRIM Pipes") as trans:
            trans.Start()
            
            total_count = len(selected_elements)
            success_count = 0
            error_count = 0
            
            for i, coupling in enumerate(selected_elements, 1):
                output.print_md('')
                output.print_md('## üîÑ PROCESSING {}/{}: Element ID {}'.format(i, total_count, coupling.Id))
                
                # T√¨m pipes k·∫øt n·ªëi v·ªõi coupling n√†y
                output.print_md('  üîç ƒêang t√¨m pipes k·∫øt n·ªëi...')
                connected_pipes = find_connected_pipes(coupling)
                
                output.print_md('  üìä T√¨m th·∫•y {} pipe(s) k·∫øt n·ªëi'.format(len(connected_pipes)))
                for j, pipe in enumerate(connected_pipes, 1):
                    output.print_md('    {}. Pipe ID: {}'.format(j, pipe.Id))
                
                if len(connected_pipes) == 2:
                    pipe1, pipe2 = connected_pipes[0], connected_pipes[1]
                    output.print_md('  ‚úÖ ƒê·ªß 2 pipes ƒë·ªÉ th·ª±c hi·ªán TRUE TRIM')
                    
                    # Disconnect v√† x√≥a coupling tr∆∞·ªõc
                    try:
                        output.print_md('  üîå ƒêang disconnect coupling...')
                        disconnect_success = False
                        
                        # Method 1: Disconnect th√¥ng qua coupling connectors
                        try:
                            if hasattr(coupling, 'MEPModel') and coupling.MEPModel:
                                connector_set = coupling.MEPModel.ConnectorManager.Connectors
                            elif hasattr(coupling, 'ConnectorManager'):
                                connector_set = coupling.ConnectorManager.Connectors
                            else:
                                connector_set = []
                            
                            for conn in connector_set:
                                if conn.IsConnected:
                                    refs_to_disconnect = []
                                    for ref in conn.AllRefs:
                                        if ref.Owner.Id != coupling.Id:
                                            refs_to_disconnect.append(ref)
                                      # Disconnect t·ª´ng ref
                                    for ref in refs_to_disconnect:
                                        try:
                                            conn.DisconnectFrom(ref)
                                            output.print_md('      ‚úÖ Disconnected t·ª´ element ID: {}'.format(ref.Owner.Id))
                                            disconnect_success = True
                                        except Exception as disc_err:
                                            output.print_md('      ‚ö†Ô∏è Kh√¥ng th·ªÉ disconnect: {}'.format(str(disc_err)))
                        
                        except Exception as connect_error:
                            output.print_md('      ‚ö†Ô∏è L·ªói disconnect method 1: {}'.format(str(connect_error)))
                        
                        # Method 2: Disconnect th√¥ng qua pipe connectors (backup)
                        if not disconnect_success:
                            output.print_md('    üîå Disconnect method 2: Pipe connectors')
                            for pipe in [pipe1, pipe2]:
                                pipe_connectors = get_pipe_connections(pipe)
                                for pipe_conn in pipe_connectors:
                                    if pipe_conn.IsConnected:
                                        refs_to_disconnect = []
                                        for ref in pipe_conn.AllRefs:
                                            if ref.Owner.Id == coupling.Id:
                                                refs_to_disconnect.append(ref)
                                        
                                        for ref in refs_to_disconnect:
                                            try:
                                                pipe_conn.DisconnectFrom(ref)
                                                output.print_md('      ‚úÖ Pipe {} disconnected t·ª´ coupling'.format(pipe.Id))
                                                disconnect_success = True
                                            except Exception as disc_err:
                                                output.print_md('      ‚ö†Ô∏è Pipe disconnect error: {}'.format(str(disc_err)))
                        
                        if disconnect_success:
                            output.print_md('  ‚úÖ ƒê√£ disconnect pipes kh·ªèi coupling')
                        else:
                            output.print_md('  ‚ö†Ô∏è Kh√¥ng disconnect ƒë∆∞·ª£c - Th·ª≠ force delete...')
                        
                    except Exception as disconnect_error:
                        output.print_md('  ‚ö†Ô∏è L·ªói disconnect: {} - Th·ª≠ x√≥a tr·ª±c ti·∫øp...'.format(str(disconnect_error)))
                    
                    # B√¢y gi·ªù m·ªõi x√≥a coupling v·ªõi multiple fallback methods
                    output.print_md('  üóëÔ∏è ƒêang x√≥a coupling...')
                    delete_success = False
                    
                    try:
                        # Method 1: X√≥a tr·ª±c ti·∫øp
                        doc.Delete(coupling.Id)
                        delete_success = True
                        output.print_md('  ‚úÖ ƒê√£ x√≥a coupling th√†nh c√¥ng (method 1)')
                        
                    except Exception as delete_error:
                        output.print_md('  ‚ö†Ô∏è Method 1 failed: {}'.format(str(delete_error)))
                        
                        # Method 2: Force delete v·ªõi collection
                        try:
                            element_ids = []
                            element_ids.append(coupling.Id)
                            doc.Delete(element_ids)
                            delete_success = True
                            output.print_md('  ‚úÖ ƒê√£ x√≥a coupling th√†nh c√¥ng (method 2 - collection)')
                            
                        except Exception as delete_error2:
                            output.print_md('  ‚ö†Ô∏è Method 2 failed: {}'.format(str(delete_error2)))
                            
                            # Method 3: Th·ª≠ v·ªõi ElementTransformUtils
                            try:
                                from Autodesk.Revit.DB import ElementTransformUtils, Transform
                                # ƒê√¥i khi move element ra kh·ªèi view r·ªìi delete
                                transform = Transform.CreateTranslation(DB.XYZ(1000, 1000, 1000))
                                ElementTransformUtils.MoveElement(doc, coupling.Id, transform.Origin)
                                doc.Delete(coupling.Id)
                                delete_success = True
                                output.print_md('  ‚úÖ ƒê√£ x√≥a coupling th√†nh c√¥ng (method 3 - move+delete)')
                                
                            except Exception as delete_error3:
                                output.print_md('  ‚ùå T·∫§T C·∫¢ METHODS TH·∫§T B·∫†I: {}'.format(str(delete_error3)))
                                output.print_md('  üí° Th·ª≠ disconnect th·ªß c√¥ng coupling n√†y trong Revit')
                    
                    if not delete_success:
                        output.print_md('  ‚ùå Kh√¥ng th·ªÉ x√≥a coupling - B·ªè qua element n√†y')
                        error_count += 1
                        continue
                    
                    # K·∫øt n·ªëi v√† TRUE TRIM
                    result = connect_pipes_comprehensive(pipe1, pipe2)
                    
                    if result == "TRUE_TRIM":
                        output.print_md('  üéâ **TH√ÄNH C√îNG: ƒê√É TH·ª∞C HI·ªÜN TRUE TRIM!**')
                        output.print_md('  üíæ **K·∫øt qu·∫£: 2 pipes ƒë√£ ƒë∆∞·ª£c G·ªòP th√†nh 1 PIPE LI·ªÄN M·∫†CH**')
                        output.print_md('  üîó **Pipe ƒë∆∞·ª£c gi·ªØ l·∫°i ch·ª©a T·∫§T C·∫¢ th√¥ng tin g·ªëc (tags, parameters, schedules)**')
                        output.print_md('  üóëÔ∏è **Pipe th·ª© 2 ƒë√£ ƒë∆∞·ª£c x√≥a (kh√¥ng c·∫ßn thi·∫øt n·ªØa)**')
                        success_count += 1
                    elif result == "EXTEND_BOTH":
                        output.print_md('  ‚ö†Ô∏è **TH√ÄNH C√îNG: ƒê√É EXTEND C·∫¢ 2 PIPES (BACKUP METHOD)**')
                        output.print_md('  üí° **K·∫øt qu·∫£: 2 pipes ƒë∆∞·ª£c extend ƒë·ªÉ k·∫øt n·ªëi (gi·ªØ nguy√™n 2 pipes ri√™ng bi·ªát)**')
                        output.print_md('  üìù **L∆∞u √Ω: TRUE TRIM kh√¥ng th√†nh c√¥ng, ƒë√£ d√πng backup method**')
                        success_count += 1
                    elif result == "UNION":
                        output.print_md('  ‚úÖ **TH√ÄNH C√îNG: ƒê√É UNION PIPES!**')
                        output.print_md('  üí° **K·∫øt qu·∫£: 2 pipes ƒë√£ ƒë∆∞·ª£c union th√†nh 1 pipe**')
                        success_count += 1
                    elif result == "CONNECTOR":
                        output.print_md('  ‚ö†Ô∏è **TH√ÄNH C√îNG M·ªòT PH·∫¶N: ƒê√É K·∫æT N·ªêI PIPES**')
                        output.print_md('  üí° **K·∫øt qu·∫£: 2 pipes ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi (ch∆∞a g·ªôp th√†nh 1)**')
                        success_count += 1
                    elif result == "EXTEND":
                        output.print_md('  ‚ö†Ô∏è **TH√ÄNH C√îNG M·ªòT PH·∫¶N: ƒê√É EXTEND PIPES**')
                        output.print_md('  üí° **K·∫øt qu·∫£: 2 pipes ƒë√£ ƒë∆∞·ª£c k√©o d√†i ƒë·ªÉ ƒë√≥ng kho·∫£ng h·ªü**')
                        success_count += 1
                    elif result == "SEGMENT":
                        output.print_md('  ‚ö†Ô∏è **TH√ÄNH C√îNG M·ªòT PH·∫¶N: ƒê√É T·∫†O PIPE SEGMENT**')
                        output.print_md('  üí° **K·∫øt qu·∫£: ƒê√£ t·∫°o pipe nh·ªè ƒë·ªÉ n·ªëi 2 pipes**')
                        success_count += 1
                    else:
                        output.print_md('  üí• **TH·∫§T B·∫†I: KH√îNG TH·ªÇ K·∫æT N·ªêI PIPES**')
                        error_count += 1
                        
                elif len(connected_pipes) > 2:
                    output.print_md('  ‚ö†Ô∏è C√≥ {} pipes k·∫øt n·ªëi (qu√° nhi·ªÅu, c·∫ßn ƒë√∫ng 2)'.format(len(connected_pipes)))
                    error_count += 1
                    
                else:
                    output.print_md('  ‚ö†Ô∏è Ch·ªâ c√≥ {} pipes k·∫øt n·ªëi (qu√° √≠t, c·∫ßn ƒë√∫ng 2)'.format(len(connected_pipes)))
                    error_count += 1
                
                output.print_md('')
            
            # T·ªïng k·∫øt cu·ªëi c√πng
            output.print_md('# üìä K·∫æT QU·∫¢ CU·ªêI C√ôNG')
            output.print_md('---')
            output.print_md('**üìà T·ªïng s·ªë:** {} coupling(s)'.format(total_count))
            output.print_md('**‚úÖ Th√†nh c√¥ng:** {} coupling(s)'.format(success_count))
            output.print_md('**‚ùå Th·∫•t b·∫°i:** {} coupling(s)'.format(error_count))
            output.print_md('**üìä T·ª∑ l·ªá th√†nh c√¥ng:** {:.1f}%'.format((success_count*100.0/total_count) if total_count > 0 else 0))
            output.print_md('')
            
            if success_count > 0:
                output.print_md('üéâ **HO√ÄN TH√ÄNH!** ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {} coupling(s)!'.format(success_count))
                output.print_md('üíæ **K·∫øt qu·∫£ ch√≠nh:** TRUE TRIM ƒë√£ G·ªòP c√°c pipes th√†nh PIPES LI·ªÄN M·∫†CH!')
                output.print_md('üîó **Th√¥ng tin ƒë∆∞·ª£c b·∫£o to√†n:** Tags, Parameters, Schedules kh√¥ng b·ªã m·∫•t!')
                output.print_md('üóëÔ∏è **Pipes th·ª´a ƒë√£ ƒë∆∞·ª£c x√≥a** ƒë·ªÉ t·∫°o ra ƒë∆∞·ªùng ·ªëng li·ªÅn m·∫°ch duy nh·∫•t')
            
            if error_count > 0:
                output.print_md('‚ö†Ô∏è **L∆∞u √Ω:** {} coupling(s) kh√¥ng th·ªÉ x·ª≠ l√Ω - ki·ªÉm tra log b√™n tr√™n'.format(error_count))
            
            # Commit transaction
            trans.Commit()
                
    except Exception as e:
        output.print_md('üí• **L·ªñI NGHI√äM TR·ªåNG:** {}'.format(str(e)))
        output.print_md('üìû **Li√™n h·ªá h·ªó tr·ª£ n·∫øu l·ªói ti·∫øp t·ª•c x·∫£y ra**')

# Ch·∫°y tool
if __name__ == '__main__':
    main()
