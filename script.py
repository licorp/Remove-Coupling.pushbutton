# -*- coding: utf-8 -*-
"""
REMOVE COUPLING TOOL - FINAL CONSOLIDATED VERSION
================================================================
Tool ƒë·ªÉ x√≥a coupling v√† g·ªôp 2 pipes th√†nh 1 pipe li·ªÅn m·∫°ch (TRUE TRIM)

T√çNH NƒÇNG CH√çNH:
- X√≥a coupling v√† t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i 2 pipe segments
- TRUE TRIM: G·ªôp 2 pipes th√†nh 1 pipe li·ªÅn m·∫°ch (nh∆∞ Trim UI trong Revit)
- 5 ph∆∞∆°ng ph√°p backup ƒë·∫£m b·∫£o th√†nh c√¥ng cao
- H·ªó tr·ª£ c·∫£ system pipe fittings v√† family instance couplings

PH∆Ø∆†NG PH√ÅP S·ª¨ D·ª§NG:
1. TRUE TRIM - T·∫°o 1 pipe m·ªõi thay th·∫ø 2 pipes c≈© (T·ªêT NH·∫§T)
2. Union Pipes - S·ª≠ d·ª•ng PlumbingUtils.UnionPipes 
3. Connector Connection - K·∫øt n·ªëi logic th√¥ng qua connectors
4. Extend Pipes - K√©o d√†i pipes v·ªÅ gi·ªØa ƒë·ªÉ ƒë√≥ng kho·∫£ng h·ªü
5. Create Segment - T·∫°o pipe segment nh·ªè l√†m c·∫ßu n·ªëi

C√ÅCH S·ª¨ D·ª§NG:
- Ch·ªçn 1 ho·∫∑c nhi·ªÅu coupling elements
- Tool s·∫Ω t·ª± ƒë·ªông t√¨m 2 pipes k·∫øt n·ªëi v·ªõi m·ªói coupling
- X√≥a coupling v√† k·∫øt n·ªëi l·∫°i pipes

T√°c gi·∫£: GitHub Copilot Assistant
Phi√™n b·∫£n: Final Consolidated - June 2025
================================================================
"""

# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import clr
clr.AddReference('RevitAPI')
clr.AddReference('RevitAPIUI')

from pyrevit import revit, script
from Autodesk.Revit import DB
from Autodesk.Revit.UI.Selection import ObjectType
from Autodesk.Revit.DB.Plumbing import PlumbingUtils

# Kh·ªüi t·∫°o output window
output = script.get_output()
output.close_others()

# L·∫•y document v√† UI document
doc = revit.doc
uidoc = revit.uidoc

# H·∫±ng s·ªë
PIPE_FITTING_CATEGORY = int(DB.BuiltInCategory.OST_PipeFitting)
PIPE_CURVES_CATEGORY = int(DB.BuiltInCategory.OST_PipeCurves)

def get_pipe_connections(pipe_element):
    """L·∫•y t·∫•t c·∫£ connector c·ªßa pipe ho·∫∑c fitting"""
    connectors = []
    try:
        element_type = pipe_element.GetType().Name
        output.print_md('      üîç Element type: {}'.format(element_type))
        
        # Ki·ªÉm tra lo·∫°i element v√† l·∫•y connector t∆∞∆°ng ·ª©ng
        if hasattr(pipe_element, 'ConnectorManager'):
            # Pipe th√¥ng th∆∞·ªùng
            output.print_md('      üìå C√≥ ConnectorManager')
            connector_manager = pipe_element.ConnectorManager
            if connector_manager:
                connector_count = 0
                for connector in connector_manager.Connectors:
                    connectors.append(connector)
                    connector_count += 1
                output.print_md('      üìä ConnectorManager: {} connectors'.format(connector_count))
            else:
                output.print_md('      ‚ö†Ô∏è ConnectorManager is None')
                
        elif hasattr(pipe_element, 'MEPModel'):
            # Family instance fitting
            output.print_md('      üìå C√≥ MEPModel (Family Instance)')
            mep_model = pipe_element.MEPModel
            if mep_model and hasattr(mep_model, 'ConnectorManager'):
                connector_manager = mep_model.ConnectorManager
                if connector_manager:
                    connector_count = 0
                    for connector in connector_manager.Connectors:
                        connectors.append(connector)
                        connector_count += 1
                    output.print_md('      üìä MEPModel.ConnectorManager: {} connectors'.format(connector_count))
                else:
                    output.print_md('      ‚ö†Ô∏è MEPModel.ConnectorManager is None')
            else:
                output.print_md('      ‚ö†Ô∏è MEPModel is None ho·∫∑c kh√¥ng c√≥ ConnectorManager')
        else:
            output.print_md('      ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ConnectorManager ho·∫∑c MEPModel')
            
    except Exception as e:
        output.print_md('      ‚ùå L·ªói khi l·∫•y connections: {}'.format(str(e)))
    
    output.print_md('      üìä T·ªïng c·ªông: {} connectors'.format(len(connectors)))
    return connectors

def find_connected_pipes(coupling):
    """T√¨m pipes k·∫øt n·ªëi v·ªõi coupling th√¥ng qua connectors"""
    connected_pipes = []
    
    try:
        output.print_md('    üîç Ph∆∞∆°ng ph√°p 1: T√¨m th√¥ng qua Connectors...')
        
        # L·∫•y connectors c·ªßa coupling
        coupling_connectors = get_pipe_connections(coupling)
        output.print_md('    üìä Coupling c√≥ {} connectors'.format(len(coupling_connectors)))
        
        for i, coupling_connector in enumerate(coupling_connectors):
            output.print_md('      üîå Connector {}: Connected to {} elements'.format(
                i+1, coupling_connector.AllRefs.Size))
            
            # Ki·ªÉm tra t·∫•t c·∫£ elements k·∫øt n·ªëi v·ªõi connector n√†y
            for ref in coupling_connector.AllRefs:
                connected_element = ref.Owner
                
                # B·ªè qua ch√≠nh coupling
                if connected_element.Id == coupling.Id:
                    continue
                
                # Ki·ªÉm tra xem c√≥ ph·∫£i pipe kh√¥ng
                if (connected_element.Category and 
                    connected_element.Category.Id.IntegerValue == PIPE_CURVES_CATEGORY):
                    
                    output.print_md('      ‚úÖ T√¨m th·∫•y pipe: ID {}'.format(connected_element.Id))
                    if connected_element not in connected_pipes:
                        connected_pipes.append(connected_element)
                        
    except Exception as e:
        output.print_md('    ‚ùå L·ªói khi t√¨m connected pipes: {}'.format(str(e)))
    
    output.print_md('    üìä T·ªïng c·ªông: {} pipes k·∫øt n·ªëi'.format(len(connected_pipes)))
    return connected_pipes

def find_connected_pipes_by_geometry(coupling, tolerance=1.0):
    """T√¨m pipes g·∫ßn coupling d·ª±a tr√™n v·ªã tr√≠ geometry (backup method)"""
    connected_pipes = []
    
    try:
        output.print_md('    üîç Ph∆∞∆°ng ph√°p 2: T√¨m th√¥ng qua Geometry Proximity...')
        
        # L·∫•y location c·ªßa coupling
        coupling_location = coupling.Location
        if not coupling_location:
            output.print_md('    ‚ö†Ô∏è Coupling kh√¥ng c√≥ location')
            return connected_pipes
        
        if hasattr(coupling_location, 'Point'):
            coupling_point = coupling_location.Point
        elif hasattr(coupling_location, 'Curve'):
            coupling_point = coupling_location.Curve.Evaluate(0.5, True)  # ƒêi·ªÉm gi·ªØa curve
        else:
            output.print_md('    ‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ coupling')
            return connected_pipes
        
        output.print_md('    üìç Coupling location: ({:.3f}, {:.3f}, {:.3f})'.format(
            coupling_point.X, coupling_point.Y, coupling_point.Z))
        
        # T√¨m t·∫•t c·∫£ pipes trong model
        pipe_collector = DB.FilteredElementCollector(doc).OfCategory(DB.BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType()
        
        for pipe in pipe_collector:
            if pipe.Location and hasattr(pipe.Location, 'Curve'):
                pipe_curve = pipe.Location.Curve
                
                # T√≠nh kho·∫£ng c√°ch t·ª´ coupling point ƒë·∫øn pipe curve
                closest_point = pipe_curve.Project(coupling_point)
                if closest_point:
                    distance = coupling_point.DistanceTo(closest_point.XYZPoint)
                    
                    if distance <= tolerance:
                        output.print_md('    ‚úÖ Pipe g·∫ßn: ID {} (kho·∫£ng c√°ch: {:.3f})'.format(pipe.Id, distance))
                        connected_pipes.append(pipe)
        
    except Exception as e:
        output.print_md('    ‚ùå L·ªói geometry search: {}'.format(str(e)))
    
    output.print_md('    üìä Geometry method: {} pipes'.format(len(connected_pipes)))
    return connected_pipes

def try_union_pipes(pipe1, pipe2):
    """Ph∆∞∆°ng ph√°p 1: Th·ª≠ union 2 pipes s·ª≠ d·ª•ng PlumbingUtils"""
    try:
        output.print_md('    üîß Th·ª≠ PlumbingUtils.UnionPipes...')
        
        # Ki·ªÉm tra xem PlumbingUtils c√≥ s·∫µn kh√¥ng
        try:
            # Th·ª≠ union pipes
            result = PlumbingUtils.UnionPipes(doc, pipe1, pipe2)
            if result:
                output.print_md('    ‚úÖ Union pipes th√†nh c√¥ng!')
                return True
            else:
                output.print_md('    ‚ö†Ô∏è Union pipes tr·∫£ v·ªÅ False')
                return False
                
        except AttributeError:
            output.print_md('    ‚ö†Ô∏è PlumbingUtils.UnionPipes kh√¥ng c√≥ s·∫µn trong phi√™n b·∫£n Revit n√†y')
            return False
        except Exception as union_error:
            output.print_md('    ‚ö†Ô∏è L·ªói Union: {}'.format(str(union_error)))
            return False
            
    except Exception as e:
        output.print_md('    ‚ùå L·ªói try_union_pipes: {}'.format(str(e)))
        return False

def connect_pipes_by_connectors(pipe1, pipe2):
    """Ph∆∞∆°ng ph√°p 2: K·∫øt n·ªëi pipes th√¥ng qua connectors (logic connection)"""
    try:
        output.print_md('    üîß K·∫øt n·ªëi pipes b·∫±ng connectors...')
        
        # L·∫•y connectors c·ªßa 2 pipes
        connectors1 = get_pipe_connections(pipe1)
        connectors2 = get_pipe_connections(pipe2)
        
        if len(connectors1) == 0 or len(connectors2) == 0:
            output.print_md('    ‚ö†Ô∏è M·ªôt ho·∫∑c c·∫£ hai pipes kh√¥ng c√≥ connector')
            return False
        
        # T√¨m connectors g·∫ßn nhau nh·∫•t
        min_distance = float('inf')
        best_conn1 = None
        best_conn2 = None
        
        for conn1 in connectors1:
            for conn2 in connectors2:
                # Ch·ªâ k·∫øt n·ªëi connectors ch∆∞a k·∫øt n·ªëi
                if not conn1.IsConnected and not conn2.IsConnected:
                    distance = conn1.Origin.DistanceTo(conn2.Origin)
                    if distance < min_distance:
                        min_distance = distance
                        best_conn1 = conn1
                        best_conn2 = conn2
        
        if best_conn1 and best_conn2:
            output.print_md('    üìè Kho·∫£ng c√°ch connectors: {:.4f} feet'.format(min_distance))
            
            # K·∫øt n·ªëi connectors
            best_conn1.ConnectTo(best_conn2)
            output.print_md('    ‚úÖ ƒê√£ k·∫øt n·ªëi connectors!')
            return True
        else:
            output.print_md('    ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y connectors ph√π h·ª£p ƒë·ªÉ k·∫øt n·ªëi')
            return False
            
    except Exception as e:
        output.print_md('    ‚ùå L·ªói connector connection: {}'.format(str(e)))
        return False

def extend_pipes_to_close_gap(pipe1, pipe2):
    """Ph∆∞∆°ng ph√°p 3: K√©o d√†i pipes v·ªÅ ph√≠a nhau ƒë·ªÉ ƒë√≥ng kho·∫£ng h·ªü"""
    try:
        output.print_md('    üîß Extend pipes ƒë·ªÉ ƒë√≥ng gap...')
        
        # L·∫•y curves c·ªßa 2 pipes
        curve1 = pipe1.Location.Curve
        curve2 = pipe2.Location.Curve
        
        # T√¨m endpoints g·∫ßn nhau nh·∫•t
        points1 = [curve1.GetEndPoint(0), curve1.GetEndPoint(1)]
        points2 = [curve2.GetEndPoint(0), curve2.GetEndPoint(1)]
        
        min_distance = float('inf')
        extend_point1 = None
        extend_point2 = None
        target_point1 = None
        target_point2 = None
        
        for p1 in points1:
            for p2 in points2:
                distance = p1.DistanceTo(p2)
                if distance < min_distance:
                    min_distance = distance
                    extend_point1 = p1
                    extend_point2 = p2
                    # ƒêi·ªÉm target l√† ƒëi·ªÉm gi·ªØa
                    target_point1 = DB.XYZ((p1.X + p2.X) / 2, (p1.Y + p2.Y) / 2, (p1.Z + p2.Z) / 2)
                    target_point2 = target_point1
        
        if min_distance < 10.0:  # Ch·ªâ extend n·∫øu gap kh√¥ng qu√° l·ªõn
            output.print_md('    üìè Gap distance: {:.4f} feet'.format(min_distance))
            
            # Extend pipe1
            if extend_point1 == curve1.GetEndPoint(0):
                new_curve1 = DB.Line.CreateBound(target_point1, curve1.GetEndPoint(1))
            else:
                new_curve1 = DB.Line.CreateBound(curve1.GetEndPoint(0), target_point1)
            
            # Extend pipe2
            if extend_point2 == curve2.GetEndPoint(0):
                new_curve2 = DB.Line.CreateBound(target_point2, curve2.GetEndPoint(1))
            else:
                new_curve2 = DB.Line.CreateBound(curve2.GetEndPoint(0), target_point2)
            
            # Update pipe locations
            pipe1.Location.Curve = new_curve1
            pipe2.Location.Curve = new_curve2
            
            output.print_md('    ‚úÖ ƒê√£ extend pipes - gap ƒë√£ ƒë√≥ng!')
            return True
        else:
            output.print_md('    ‚ö†Ô∏è Gap qu√° l·ªõn ƒë·ªÉ extend: {:.4f} feet'.format(min_distance))
            return False
            
    except Exception as e:
        output.print_md('    ‚ùå L·ªói extend pipes: {}'.format(str(e)))
        return False

def create_connecting_pipe_segment(pipe1, pipe2):
    """Ph∆∞∆°ng ph√°p 4: T·∫°o pipe segment ng·∫Øn ƒë·ªÉ n·ªëi 2 pipes"""
    try:
        output.print_md('    üîß T·∫°o pipe segment ƒë·ªÉ n·ªëi...')
        
        # T√¨m connectors g·∫ßn nhau nh·∫•t
        connectors1 = get_pipe_connections(pipe1)
        connectors2 = get_pipe_connections(pipe2)
        
        min_distance = float('inf')
        conn1 = None
        conn2 = None
        
        for c1 in connectors1:
            for c2 in connectors2:
                distance = c1.Origin.DistanceTo(c2.Origin)
                if distance < min_distance:
                    min_distance = distance
                    conn1 = c1
                    conn2 = c2
        
        if not conn1 or not conn2:
            output.print_md('    ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y connectors ph√π h·ª£p')
            return False
        
        output.print_md('    üìè Kho·∫£ng c√°ch c·∫ßn n·ªëi: {:.4f} feet'.format(min_distance))
        
        # T·∫°o curve n·ªëi 2 connector
        connecting_curve = DB.Line.CreateBound(conn1.Origin, conn2.Origin)
        
        # L·∫•y pipe type v√† system t·ª´ pipe1
        pipe_type = pipe1.PipeType
        system_type = pipe1.MEPSystem.GetTypeId() if pipe1.MEPSystem else None
        level_id = pipe1.ReferenceLevel.Id
        
        # T·∫°o pipe m·ªõi ƒë·ªÉ ƒë√≥ng kho·∫£ng h·ªü
        new_pipe = DB.Plumbing.Pipe.Create(doc, system_type, pipe_type.Id, level_id, connecting_curve)
        
        if new_pipe:
            output.print_md('    ‚úÖ ƒê√£ t·∫°o pipe segment - ID: {} (d√†i: {:.4f} feet)'.format(new_pipe.Id, min_distance))
            
            # K·∫øt n·ªëi v·ªõi 2 pipe g·ªëc
            new_connectors = get_pipe_connections(new_pipe)
            if len(new_connectors) >= 2:
                new_connectors[0].ConnectTo(conn1)
                new_connectors[1].ConnectTo(conn2)
                output.print_md('    ‚úÖ ƒê√£ k·∫øt n·ªëi pipe segment v·ªõi 2 pipes g·ªëc!')
            
            return True
        else:
            output.print_md('    ‚ùå Kh√¥ng th·ªÉ t·∫°o pipe segment')
            return False
            
    except Exception as e:
        output.print_md('    ‚ùå L·ªói t·∫°o connecting segment: {}'.format(str(e)))
        return False

def true_trim_pipes(pipe1, pipe2):
    """PH∆Ø∆†NG PH√ÅP TRUE TRIM: T·∫°o 1 pipe m·ªõi li·ªÅn m·∫°ch thay th·∫ø 2 pipes c≈©"""
    try:
        output.print_md('    üéØ TRUE TRIM: T·∫°o 1 pipe m·ªõi thay th·∫ø 2 pipes...')
        
        # L·∫•y th√¥ng tin t·ª´ pipe1 ƒë·ªÉ t·∫°o pipe m·ªõi
        pipe_type = pipe1.PipeType
        level_id = pipe1.ReferenceLevel.Id
        diameter = pipe1.Diameter
          # L·∫•y system type c·∫©n th·∫≠n h∆°n
        system_type_id = None
        pipe_system = None
        try:
            if pipe1.MEPSystem:
                pipe_system = pipe1.MEPSystem
                system_type_id = pipe1.MEPSystem.GetTypeId()
                output.print_md('    üìã System Type ID: {}'.format(system_type_id))
                output.print_md('    üìã System Name: {}'.format(pipe_system.Name))
            else:
                output.print_md('    ‚ö†Ô∏è Pipe kh√¥ng c√≥ MEPSystem, s·∫Ω t·∫°o pipe kh√¥ng c√≥ system')
        except:
            output.print_md('    ‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y system type, s·∫Ω t·∫°o pipe kh√¥ng c√≥ system')
        
        # L·∫•y curves c·ªßa 2 pipes
        curve1 = pipe1.Location.Curve
        curve2 = pipe2.Location.Curve
        
        # X√°c ƒë·ªãnh ƒëi·ªÉm ƒë·∫ßu v√† cu·ªëi c·ªßa 2 pipes
        # T√¨m ƒëi·ªÉm xa nh·∫•t ƒë·ªÉ t·∫°o pipe li·ªÅn m·∫°ch
        points = [
            curve1.GetEndPoint(0), curve1.GetEndPoint(1),
            curve2.GetEndPoint(0), curve2.GetEndPoint(1)
        ]
        
        # T√¨m 2 ƒëi·ªÉm xa nh·∫•t (ƒë·∫ßu v√† cu·ªëi c·ªßa pipe m·ªõi)
        max_distance = 0
        start_point = None
        end_point = None
        
        for i in range(len(points)):
            for j in range(i+1, len(points)):
                distance = points[i].DistanceTo(points[j])
                if distance > max_distance:
                    max_distance = distance
                    start_point = points[i]
                    end_point = points[j]
        
        if not start_point or not end_point:
            output.print_md('    ‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒëi·ªÉm ƒë·∫ßu/cu·ªëi')
            return False
            
        output.print_md('    üìè Chi·ªÅu d√†i pipe m·ªõi: {:.4f} feet'.format(max_distance))
        output.print_md('    üìç T·ª´: ({:.3f}, {:.3f}, {:.3f})'.format(
            start_point.X, start_point.Y, start_point.Z))
        output.print_md('    üìç ƒê·∫øn: ({:.3f}, {:.3f}, {:.3f})'.format(
            end_point.X, end_point.Y, end_point.Z))
        
        # T·∫°o curve m·ªõi li·ªÅn m·∫°ch
        new_curve = DB.Line.CreateBound(start_point, end_point)
          # T·∫°o pipe m·ªõi
        output.print_md('    üîß T·∫°o pipe m·ªõi li·ªÅn m·∫°ch...')
          # Th·ª≠ t·∫°o pipe v·ªõi c√°c ph∆∞∆°ng ph√°p kh√°c nhau
        new_pipe = None
        try:
            # Ph∆∞∆°ng ph√°p 1: V·ªõi system type ID (5 parameters)
            if system_type_id and system_type_id != DB.ElementId.InvalidElementId:
                output.print_md('    üîß Th·ª≠ t·∫°o pipe v·ªõi system type ID...')
                new_pipe = DB.Plumbing.Pipe.Create(doc, system_type_id, pipe_type.Id, level_id, start_point, end_point)
            else:
                # Ph∆∞∆°ng ph√°p 2: Kh√¥ng c√≥ system type (4 parameters)
                output.print_md('    üîß Th·ª≠ t·∫°o pipe kh√¥ng c√≥ system type...')
                new_pipe = DB.Plumbing.Pipe.Create(doc, pipe_type.Id, level_id, start_point, end_point)
        except Exception as e1:
            output.print_md('    ‚ö†Ô∏è L·ªói t·∫°o pipe v·ªõi points: {}'.format(str(e1)))
            try:
                # Ph∆∞∆°ng ph√°p 3: S·ª≠ d·ª•ng curve (backup method)
                output.print_md('    üîß Th·ª≠ t·∫°o pipe v·ªõi curve...')
                if system_type_id and system_type_id != DB.ElementId.InvalidElementId:
                    new_pipe = DB.Plumbing.Pipe.Create(doc, system_type_id, pipe_type.Id, level_id, new_curve)
                else:
                    new_pipe = DB.Plumbing.Pipe.Create(doc, pipe_type.Id, level_id, new_curve)
            except Exception as e2:
                output.print_md('    ‚ùå L·ªói t·∫°o pipe v·ªõi curve: {}'.format(str(e2)))
                try:
                    # Ph∆∞∆°ng ph√°p 4: Ch·ªâ v·ªõi pipe type object tr·ª±c ti·∫øp
                    output.print_md('    üîß Th·ª≠ t·∫°o pipe v·ªõi pipe type object...')
                    new_pipe = DB.Plumbing.Pipe.Create(doc, pipe_type, level_id, start_point, end_point)
                except Exception as e3:
                    output.print_md('    ‚ùå L·ªói cu·ªëi c√πng: {}'.format(str(e3)))
        
        if new_pipe:
            # Set diameter gi·ªëng pipes c≈©
            new_pipe.get_Parameter(DB.BuiltInParameter.RBS_PIPE_DIAMETER_PARAM).Set(diameter)
            
            output.print_md('    ‚úÖ ƒê√£ t·∫°o pipe m·ªõi ID: {}'.format(new_pipe.Id))
            
            # X√≥a 2 pipes c≈©
            output.print_md('    üóëÔ∏è X√≥a 2 pipes c≈©...')
            doc.Delete(pipe1.Id)
            doc.Delete(pipe2.Id)
            
            output.print_md('    üéâ HO√ÄN TH√ÄNH TRUE TRIM! ƒê√£ g·ªôp 2 pipes th√†nh 1 pipe li·ªÅn m·∫°ch!')
            output.print_md('    üìä K·∫øt qu·∫£: Pipe m·ªõi ID {} thay th·∫ø 2 pipes c≈©'.format(new_pipe.Id))
            return True
        else:
            output.print_md('    ‚ùå Kh√¥ng th·ªÉ t·∫°o pipe m·ªõi')
            return False
        
    except Exception as e:
        output.print_md('    ‚ùå L·ªói True Trim: {}'.format(str(e)))
        return False

def connect_pipes_comprehensive(pipe1, pipe2):
    """K·∫øt n·ªëi pipes v·ªõi TRUE TRIM v√† c√°c ph∆∞∆°ng ph√°p backup"""
    try:
        output.print_md('  üéØ B·∫ÆT ƒê·∫¶U PROCESS TRUE TRIM V√Ä K·∫æT N·ªêI...')
        
        # PH∆Ø∆†NG PH√ÅP M·ªöI: TRUE TRIM (t·ªët nh·∫•t - t·∫°o 1 pipe li·ªÅn m·∫°ch)
        output.print_md('  üîÑ ƒêang th·ª≠ TRUE TRIM METHOD...')
        if true_trim_pipes(pipe1, pipe2):
            return "TRUE_TRIM"
        
        # Ph∆∞∆°ng ph√°p 1: Union pipes (backup)
        output.print_md('  üîÑ ƒêang th·ª≠ Ph∆∞∆°ng ph√°p 1: Union pipes...')
        if try_union_pipes(pipe1, pipe2):
            return "UNION"
        
        # Ph∆∞∆°ng ph√°p 2: Connector-based connection (k·∫øt n·ªëi logic)
        output.print_md('  üîÑ ƒêang th·ª≠ Ph∆∞∆°ng ph√°p 2: K·∫øt n·ªëi Connector...')
        if connect_pipes_by_connectors(pipe1, pipe2):
            return "CONNECTOR"
        
        # Ph∆∞∆°ng ph√°p 3: Extend pipes v·ªÅ gi·ªØa (ƒë√≥ng kho·∫£ng h·ªü v·∫≠t l√Ω)
        output.print_md('  üîÑ ƒêang th·ª≠ Ph∆∞∆°ng ph√°p 3: Extend pipes...')
        if extend_pipes_to_close_gap(pipe1, pipe2):
            return "EXTEND"
        
        # Ph∆∞∆°ng ph√°p 4: T·∫°o pipe segment m·ªõi (t·∫°o c·∫ßu n·ªëi)
        output.print_md('  üîÑ ƒêang th·ª≠ Ph∆∞∆°ng ph√°p 4: T·∫°o pipe segment...')
        if create_connecting_pipe_segment(pipe1, pipe2):
            return "SEGMENT"
        
        output.print_md('  ‚ùå T·∫§T C·∫¢ 5 PH∆Ø∆†NG PH√ÅP TH·∫§T B·∫†I')
        return False
        
    except Exception as e:
        output.print_md('  ‚ùå L·ªói khi k·∫øt n·ªëi pipes: {}'.format(str(e)))
        return False

def main():
    """H√†m ch√≠nh c·ªßa tool - Complete Remove Coupling Tool"""
    try:
        selection = uidoc.Selection
        
        # Hi·ªÉn th·ªã header v√† h∆∞·ªõng d·∫´n
        output.print_md('# üîß REMOVE COUPLING TOOL - FINAL CONSOLIDATED VERSION')
        output.print_md('## üéØ TRUE TRIM: G·ªôp 2 pipes th√†nh 1 pipe li·ªÅn m·∫°ch')
        output.print_md('')
        output.print_md('### üîÑ C√°c ph∆∞∆°ng ph√°p ƒë∆∞·ª£c s·ª≠ d·ª•ng:')
        output.print_md('1. **TRUE TRIM** - T·∫°o 1 pipe m·ªõi thay th·∫ø 2 pipes c≈© (t·ªët nh·∫•t)')
        output.print_md('2. **Union Pipes** - Backup method using PlumbingUtils')
        output.print_md('3. **Connector Connection** - K·∫øt n·ªëi logic')
        output.print_md('4. **Extend Pipes** - K√©o d√†i v·ªÅ gi·ªØa') 
        output.print_md('5. **Create Segment** - T·∫°o pipe n·ªëi')
        output.print_md('')
        output.print_md('### üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:')
        output.print_md('- Ch·ªçn 1 ho·∫∑c nhi·ªÅu **coupling elements**')
        output.print_md('- Tool s·∫Ω t·ª± ƒë·ªông t√¨m 2 pipes k·∫øt n·ªëi v·ªõi m·ªói coupling')
        output.print_md('- X√≥a coupling v√† **G·ªòP 2 PIPES TH√ÄNH 1 PIPE** (n·∫øu c√≥ th·ªÉ)')
        output.print_md('')
        
        # Y√™u c·∫ßu user ch·ªçn coupling elements
        try:
            selected_refs = selection.PickObjects(ObjectType.Element, 'Ch·ªçn coupling elements ƒë·ªÉ x√≥a v√† k·∫øt n·ªëi pipes')
        except:
            output.print_md('‚ùå **ƒê√£ h·ªßy ch·ªçn** - Tool d·ª´ng th·ª±c hi·ªán')
            return
        
        if not selected_refs:
            output.print_md('‚ö†Ô∏è **Kh√¥ng c√≥ element n√†o ƒë∆∞·ª£c ch·ªçn**')
            return
        
        # X·ª≠ l√Ω t·ª´ng coupling trong m·ªôt transaction duy nh·∫•t
        with revit.Transaction('Remove Coupling and Connect Pipes - Complete'):
            success_count = 0
            error_count = 0
            total_count = len(selected_refs)
            
            output.print_md('üöÄ **B·∫ÆT ƒê·∫¶U X·ª¨ L√ù {} COUPLING(S)...**'.format(total_count))
            output.print_md('')
            
            for idx, ref in enumerate(selected_refs, 1):
                coupling = doc.GetElement(ref.ElementId)
                
                output.print_md('## üîß [{}/{}] X·ª≠ l√Ω Coupling ID: {}'.format(idx, total_count, coupling.Id))
                
                # Ki·ªÉm tra t√≠nh h·ª£p l·ªá
                if not coupling or not coupling.Category:
                    output.print_md('  ‚ö†Ô∏è Element kh√¥ng h·ª£p l·ªá')
                    error_count += 1
                    continue
                    
                if coupling.Category.Id.IntegerValue != PIPE_FITTING_CATEGORY:
                    output.print_md('  ‚ö†Ô∏è Kh√¥ng ph·∫£i pipe fitting (Category: {})'.format(
                        coupling.Category.Name if coupling.Category else 'Unknown'))
                    error_count += 1
                    continue
                
                # Debug th√¥ng tin coupling
                try:
                    output.print_md('  üîç Lo·∫°i: {}'.format(coupling.GetType().Name))
                    if hasattr(coupling, 'Symbol') and coupling.Symbol:
                        output.print_md('  üìã Family: {}'.format(coupling.Symbol.Name))
                except Exception as e:
                    output.print_md('  ‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt: {}'.format(str(e)))
                
                # T√¨m pipe k·∫øt n·ªëi
                output.print_md('  üîç ƒêang t√¨m pipes k·∫øt n·ªëi...')
                connected_pipes = find_connected_pipes(coupling)
                output.print_md('  üìä Connector method: {} pipes'.format(len(connected_pipes)))
                
                # N·∫øu kh√¥ng t√¨m th·∫•y pipe b·∫±ng connector, th·ª≠ geometry
                if len(connected_pipes) == 0:
                    output.print_md('  üîç Th·ª≠ t√¨m b·∫±ng geometry proximity...')
                    connected_pipes = find_connected_pipes_by_geometry(coupling)
                    output.print_md('  üìä Geometry method: {} pipes'.format(len(connected_pipes)))
                
                # X·ª≠ l√Ω k·∫øt qu·∫£
                if len(connected_pipes) == 2:
                    pipe1, pipe2 = connected_pipes
                    output.print_md('  üìç **Pipe 1:** {} | **Pipe 2:** {}'.format(pipe1.Id, pipe2.Id))
                    
                    # X√≥a coupling
                    output.print_md('  üóëÔ∏è ƒêang x√≥a coupling...')
                    doc.Delete(coupling.Id)
                    output.print_md('  ‚úÖ ƒê√£ x√≥a coupling th√†nh c√¥ng')
                    
                    # K·∫øt n·ªëi v√† TRUE TRIM
                    result = connect_pipes_comprehensive(pipe1, pipe2)
                    if result == "TRUE_TRIM":
                        output.print_md('  üéâ **TH√ÄNH C√îNG: ƒê√É TH·ª∞C HI·ªÜN TRUE TRIM!**')
                        output.print_md('  üí° **K·∫øt qu·∫£: 2 pipes ƒë√£ ƒë∆∞·ª£c G·ªòP TH√ÄNH 1 PIPE LI·ªÄN M·∫†CH**')
                        success_count += 1
                    elif result == "UNION":
                        output.print_md('  ‚úÖ **TH√ÄNH C√îNG: ƒê√É UNION PIPES!**')
                        output.print_md('  üí° **K·∫øt qu·∫£: 2 pipes ƒë√£ ƒë∆∞·ª£c union th√†nh 1 pipe**')
                        success_count += 1
                    elif result == "CONNECTOR":
                        output.print_md('  ‚ö†Ô∏è **TH√ÄNH C√îNG M·ªòT PH·∫¶N: ƒê√É K·∫æT N·ªêI PIPES**')
                        output.print_md('  üí° **K·∫øt qu·∫£: 2 pipes ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi (ch∆∞a g·ªôp th√†nh 1)**')
                        success_count += 1
                    elif result == "EXTEND":
                        output.print_md('  ‚ö†Ô∏è **TH√ÄNH C√îNG M·ªòT PH·∫¶N: ƒê√É EXTEND PIPES**')
                        output.print_md('  üí° **K·∫øt qu·∫£: 2 pipes ƒë√£ ƒë∆∞·ª£c k√©o d√†i ƒë·ªÉ ƒë√≥ng kho·∫£ng h·ªü**')
                        success_count += 1
                    elif result == "SEGMENT":
                        output.print_md('  ‚ö†Ô∏è **TH√ÄNH C√îNG M·ªòT PH·∫¶N: ƒê√É T·∫†O PIPE SEGMENT**')
                        output.print_md('  üí° **K·∫øt qu·∫£: ƒê√£ t·∫°o pipe nh·ªè ƒë·ªÉ n·ªëi 2 pipes**')
                        success_count += 1
                    else:
                        output.print_md('  üí• **TH·∫§T B·∫†I: KH√îNG TH·ªÇ K·∫æT N·ªêI PIPES**')
                        error_count += 1
                        
                elif len(connected_pipes) > 2:
                    output.print_md('  ‚ö†Ô∏è C√≥ {} pipes k·∫øt n·ªëi (qu√° nhi·ªÅu, c·∫ßn ƒë√∫ng 2)'.format(len(connected_pipes)))
                    error_count += 1
                    
                else:
                    output.print_md('  ‚ö†Ô∏è Ch·ªâ c√≥ {} pipes k·∫øt n·ªëi (qu√° √≠t, c·∫ßn ƒë√∫ng 2)'.format(len(connected_pipes)))
                    error_count += 1
                
                output.print_md('')
            
            # T·ªïng k·∫øt cu·ªëi c√πng
            output.print_md('# üìä K·∫æT QU·∫¢ CU·ªêI C√ôNG')
            output.print_md('---')
            output.print_md('**üìà T·ªïng s·ªë:** {} coupling(s)'.format(total_count))
            output.print_md('**‚úÖ Th√†nh c√¥ng:** {} coupling(s)'.format(success_count))
            output.print_md('**‚ùå Th·∫•t b·∫°i:** {} coupling(s)'.format(error_count))
            output.print_md('**üìä T·ª∑ l·ªá th√†nh c√¥ng:** {:.1f}%'.format((success_count*100.0/total_count) if total_count > 0 else 0))
            output.print_md('')
            
            if success_count > 0:
                output.print_md('üéâ **HO√ÄN TH√ÄNH!** ƒê√£ ƒë√≥ng ho√†n to√†n kho·∫£ng h·ªü cho {} coupling(s)!'.format(success_count))
                output.print_md('üîó **K·∫øt qu·∫£:** T·∫•t c·∫£ pipes ƒë√£ ƒë∆∞·ª£c n·ªëi li·ªÅn m·∫°ch!')
            
            if error_count > 0:
                output.print_md('‚ö†Ô∏è **L∆∞u √Ω:** {} coupling(s) kh√¥ng th·ªÉ x·ª≠ l√Ω - ki·ªÉm tra log b√™n tr√™n'.format(error_count))
                
    except Exception as e:
        output.print_md('üí• **L·ªñI NGHI√äM TR·ªåNG:** {}'.format(str(e)))
        output.print_md('üìû **Li√™n h·ªá h·ªó tr·ª£ n·∫øu l·ªói ti·∫øp t·ª•c x·∫£y ra**')

# Ch·∫°y tool
if __name__ == '__main__':
    main()
